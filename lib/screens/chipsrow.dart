import 'package:flex_color_scheme/flex_color_scheme.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:newsworlds/settingscreen.dart';

import '../components/components.dart';
import '../components/search.dart';
import '../models/mymodels.dart';
import '../utilities/constants.dart';
import 'chipsscreen.dart';

class ChipsRow extends StatefulWidget {
  const ChipsRow({
    Key? key,
    required this.themeMode,
    required this.onThemeModeChanged,
    required this.schemeIndex,
    required this.onSchemeChanged,
    required this.flexSchemeData,
  }) : super(key: key);
  final ThemeMode themeMode;
  final ValueChanged<ThemeMode> onThemeModeChanged;
  final int schemeIndex;
  final ValueChanged<int> onSchemeChanged;
  final FlexSchemeData flexSchemeData;

  @override
  _ChipsRowState createState() => _ChipsRowState();
}

class _ChipsRowState extends State<ChipsRow> {
  bool isSearching = false;
  String? newsSearched;
  Autogenerated? autogenerated;
  Components components = Components();
  @override
  void initState() {
    super.initState();
    components.getData().then((value) => autogenerated = value);
    setState(() {});
  }

  List<String> choices = ['All', 'Events', 'Politics', 'Sports', 'Weather'];
  int defaultChoiceIndex = 0;
  String query = 'All';
  @override
  Widget build(BuildContext context) {
    final ThemeData theme = Theme.of(context);
    final ColorScheme colorScheme = theme.colorScheme;
    final TextTheme textTheme = theme.textTheme;
    final TextStyle headline4 = textTheme.headline4!;
    final bool isLight = Theme.of(context).brightness == Brightness.light;
    return MaterialApp(
      theme: theme,
      home: SafeArea(
        child: Scaffold(
          backgroundColor: theme.scaffoldBackgroundColor,
          appBar: AppBar(
            backgroundColor: theme.primaryColor,
            leading: IconButton(
              onPressed: () {
                setState(() {
                  var selectedTheme = Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => SettingPage(
                              schemeIndex: widget.schemeIndex,
                              onSchemeChanged: widget.onSchemeChanged,
                              themeMode: widget.themeMode,
                              onThemeModeChanged: widget.onThemeModeChanged,
                              flexSchemeData: widget.flexSchemeData)));
                });
              },
              icon: Icon(
                Icons.settings_rounded,
                size: 30.0,
              ),
            ),
            title: !isSearching
                ? Center(
                    child: Text(
                      'NewsWorld',
                      style: textTheme.subtitle1!.copyWith(
                          fontWeight: FontWeight.w700, fontSize: 28.0),
                    ),
                  )
                : buildTextField(context),
            actions: [
              isSearching
                  ? IconButton(
                      onPressed: () {
                        setState(() {
                          this.isSearching = false;
                        });
                      },
                      icon: Icon(Icons.cancel),
                    )
                  : IconButton(
                      onPressed: () {
                        setState(() {
                          this.isSearching = true;
                        });
                      },
                      icon: Icon(
                        Icons.search,
                        size: 35.0,
                      ),
                    )
            ],
            // backgroundColor: Colors.purple[900],
          ),
          body: SafeArea(
            child: Column(
              children: [
                ChoiceChips(context),
                Flexible(child: components.buildFutureBuilder()),
              ],
            ),
          ),
        ),
      ),
    );
  }

  TextField buildTextField(BuildContext context) {
    return TextField(
      textInputAction: TextInputAction.search,
      style: kSubTextStyle.copyWith(color: Colors.white),
      decoration: kTextFieldInputDecoration,
      onSubmitted: (value) {
        newsSearched = value;
        Navigator.push(context,
            MaterialPageRoute(builder: (context) => Search(newsSearched)));
      },
    );
  }

  Widget ChoiceChips(context) {
    final ThemeData theme = Theme.of(context);
    final TextTheme textTheme = theme.textTheme;
    return Container(
      height: MediaQuery.of(context).size.height * 0.1,
      width: MediaQuery.of(context).size.width,
      margin: EdgeInsets.symmetric(horizontal: 10.0, vertical: 10.0),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: choices.length,
        itemBuilder: (BuildContext context, int index) {
          return Wrap(
            children: [
              ChoiceChip(
                label: Text(
                  choices[index],
                  style: textTheme.headline6!
                      .copyWith(fontWeight: FontWeight.w700, fontSize: 17.0),
                ),
                backgroundColor: theme.secondaryHeaderColor,
                selectedColor: theme.indicatorColor,
                padding: EdgeInsets.all(9.0),
                elevation: 6.0,
                selected: defaultChoiceIndex == index,
                onSelected: (bool isSelected) {
                  setState(() {
                    defaultChoiceIndex = isSelected ? index : 0;
                    query = choices[index];
                    query == 'All'
                        ? Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => ChipsRow(
                                      schemeIndex: widget.schemeIndex,
                                      onSchemeChanged: widget.onSchemeChanged,
                                      themeMode: widget.themeMode,
                                      onThemeModeChanged:
                                          widget.onThemeModeChanged,
                                      flexSchemeData: widget.flexSchemeData,
                                    )))
                        : Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => ChipsScreen(
                                      schemeIndex: widget.schemeIndex,
                                      onSchemeChanged: widget.onSchemeChanged,
                                      recievedQuery: query,
                                      themeMode: widget.themeMode,
                                      onThemeModeChanged:
                                          widget.onThemeModeChanged,
                                      flexSchemeData: widget.flexSchemeData,
                                    )));
                  });
                },
              ),
            ],
          );
        },
      ),
    );
  }
}
